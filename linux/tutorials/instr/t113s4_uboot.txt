https://linux-sunxi.org/Bootable_SD_card#Bootloader
https://linux-sunxi.org/U-Boot
https://habr.com/ru/articles/574118/
https://habr.com/ru/articles/585432/
update instr:
https://habr.com/ru/articles/470519/
https://habr.com/ru/articles/400011/

Split SD on partitions

start 	sector 	size 	usage
0KB 	0 	    8KB   	Unused, available for an MBR or (limited) GPT partition table
8KB 	16 	    32KB 	Initial SPL loader
40KB 	80 	    -     	U-Boot proper

544KB 	1088 	128KB 	environment  (Legacy)


First identify the device of the card and export it as ${card}. The commands
cat /proc/partitions

    If the SD card is connected via USB and is sdX (replace X for a correct letter)
export card=/dev/sdX
export p=""

    If the SD card is connected via mmc and is mmcblk0
export card=/dev/mmcblk0
export p=p

Cleaning

To be on safe side erase the first part of your SD Card (also clears the partition table).
sudo dd if=/dev/zero of=${card} bs=1M count=1
sudo dd if=/dev/zero of=/dev/sdd bs=1M count=1

//If you wish to keep the partition table, run:
//dd if=/dev/zero of=${card} bs=1k count=1023 seek=1

Bootloader

You will need to write the u-boot-sunxi-with-spl.bin to the sd-card. If you don't have this file yet, refer to the "compilation" section of mainline or legacy U-Boot.

sudo dd if=u-boot-sunxi-with-spl.bin of=${card} bs=1024 seek=8
sudo dd if=u-boot-sunxi-with-spl.bin of=/dev/sdd bs=1024 seek=8

////////////////////////////   SD   ///////////////////////////////////////////
Partitioning

With recent U-Boot it's fine to use ext2/ext4 as boot partition, and other filesystems in the root partition too.
With separate boot partition

Partition the card with a 16MB boot partition starting at 1MB, and the rest as root partition

cat <<EOT | sudo sfdisk ${card}
1M,168M,c
,,L
EOT

cat <<EOT | sudo sfdisk /dev/sdd
1M,168M,c
,,L
EOT

You should now be able to create the actual filesystems:

sudo mkfs.vfat ${card}${p}1
sudo mkfs.ext4 ${card}${p}2

cardroot=${card}${p}2

//////////////// UBOOT ////////////////////////////////////////////////////////
sudo apt install uboot-tools
apt-get install swig
apt-get install python3-dev
apt-get install device-tree-compiler
git clone https://git.trustedfirmware.org/TF-A/trusted-firmware-a.git

diff --git a/drivers/ram/sunxi/dram_sun20i_d1.c b/drivers/ram/sunxi/dram_sun20i_d1.c
index 25005ceefb..258d854f7f 100644
--- a/drivers/ram/sunxi/dram_sun20i_d1.c
+++ b/drivers/ram/sunxi/dram_sun20i_d1.c
@@ -674,7 +674,7 @@ static void mctl_phy_ac_remapping(dram_para_t *para)
 			switch (fuse) {
 			case 8: cfg = ac_remapping_tables[2]; break;
 			case 9: cfg = ac_remapping_tables[3]; break;
-			case 10: cfg = ac_remapping_tables[5]; break;
+			case 10: cfg = ac_remapping_tables[0]; break;
 			case 11: cfg = ac_remapping_tables[4]; break;
 			default:
 			case 12: cfg = ac_remapping_tables[1]; break;


uboot:
make CROSS_COMPILE=arm-linux-gnueabi- mangopi_mq_r_defconfig

//(uart0 CONS_INDEX=1 in arch/arm/mach-sunxi)
make nconfig -> device drivers -> serial ->serial port to 1
// device tree: arch/arm/dts/sunxi-d1s-t113-mangopi_mq_r.dtsi:
delete uart3_pb_pinsa
in aliases serial0 = &uart0
in chosen stdout-path = "serial0:115200n8"

//compile
make CROSS_COMPILE=arm-linux-gnueabi-

Install U-Boot

    Convert the boot.cmd to boot.scr using mkimage:

armhf:
 mkimage -C none -A arm -T script -d boot.cmd boot.scr

arm64:
 mkimage -C none -A arm64 -T script -d boot.cmd boot.scr

    Copy the bootloader to the installation media

sudo dd if=u-boot-sunxi-with-spl.bin of=/dev/sdd bs=1024 seek=8
///////////////////////////////////////////////////////////////////////////////

/////////////////////  Device tree Uboot compile   ///////////////////////////
copy from linux
in file sunxi-u-boot.dtsi
alias mmc0 to &sdc0
alias mmc2 to &sdc2

/////////////////////   LINUX   ///////////////////////////////////////////////
mkimage -A arm -O linux -T kernel -C none -a 0x41000000 -e 0x41000000 -n 'Linux' -d Image zImage
mkimage -A arm -T ramdisk -d uInitrd initrd.img

# create boot.cmd
setenv bootargs console=ttyS0,115200 root=/dev/mmcblk0p5 rootwait panic=10 loglevel=8
load mmc 0:4 0x41000000 zImage
load mmc 0:4 0x41800000 t113s4.dtb
bootz 0x41000000-0x41800000

bootm - legacy kernel boot
// mkimage -A arm -O linux -T kernel -C none -a 0x41000000 -e 0x41000000 -n 'Linux' -d zImage image
setenv bootargs console=ttyS0,115200 root=/dev/mmcblk0p2 rootwait panic=10 loglevel=8
// saveenv
load mmc 0:4 0x41000000 image  (after mkimage)
load mmc 0:4 0x41800000 t113s4.dtb
bootm 0x41000000 - 0x41800000

mkimage -C none -A arm -T script -d boot.cmd boot.scr

in sdd1 boot.scr, boot.cmd, Image.img, t113s4.dtb

mount ${card}${p}1 /mnt/
cp linux-sunxi/arch/arm/boot/uImage /mnt/
cp sunxi-boards/sys_config/a10/script.bin /mnt/
umount /mnt/


//uboot
printenv
load mmc 0:1 0x41000000 zImage
load mmc 0:1 0x41800000 t113s4.dtb
booti 41000000 - 41800000

/////////////////////   TFTP   ///////////////////////////////////////////////
Ubuntu:
sudo apt install tftpd-hpa
sudo systemctl status tftpd-hpa
sudo mkdir /tftp
sudo chown tftp:tftp /tftp
sudo systemctl restart tftpd-hpa


// Initrd initramfs boot
Uboot:  (orang pi zero2)
printenv   //check address of dtb and initrd and kernel
setenv ipaddr 192.168.1.101
setenv serverip 192.168.1.200
tftp 0x42000000 vmlinuz
tftp 0x4FA00000 sun50i-h616-orangepi-zero2.dtb
tftp 0x4FF00000 initrd.img
setenv bootargs console=ttyS0
booti 0x42000000 0x4FF00000 0x4fa00000

// without initrd => in boot.cmd
setenv bootargs console=ttyS0,115200 root=/dev/mmcblk0p2 rootwait panic=10 loglevel=8
load mmc 0:1 0x41000000 zImage
load mmc 0:1 0x41800000 t113s4.dtb
bootz 0x41000000 - 0x41800000

/////////////////////   NFS   ///////////////////////////////////////////////
setenv ipaddr 192.168.1.101
setenv serverip 192.168.1.200
setenv npath /export
tftp 0x42000000 vmlinuz
tftp 0x4FA00000 sun50i-h616-orangepi-zero2.dtb
setenv bootargs console=ttyS0,115200 root=/dev/nfs rw nfsroot=${serverip}:${npath} ip=${ipaddr}
booti 0x42000000 - 0x4fa00000

env set ethact eth1


///////////////////  FIT  ///////////////////////////////////////
////////////// with init ramfs ///////////////////////////
find . | cpio -H newc -ov --owner root:root > ../initramfs.cpio
cd ..
gzip initramfs.cpio
mkimage -A arm -O linux -T ramdisk -d initramfs.cpio.gz uRamfs

mkimage -f signram.its -K sun50i-h616-orangepi-zero2-pubkey.dtb -k keys -r image.fit

export UDEV=/dev/sdd1
sudo mount $UDEV /mnt/boot && sudo cp image.fit /mnt/boot/image.fit && sleep 1 && sudo umount $UDEV

mkimage -C none -A arm -T script -d boot.cmd boot.scr

setenv bootargs console=ttyS0,115200 rdinit=/bin/sh
load mmc 0:1 0x46000000 image.fit
bootm 0x46000000
bootm 0x46000000 0x464cd53c 0x464bffd4


setenv bootargs console=ttyS0,115200 rdinit=/bin/sh
load mmc 0:1 0x41000000 zImage
load mmc 0:1 0x41000000 Image.gz // not
load mmc 0:1 0x41800000 t113s4.dtb
load mmc 0:1 0x41C00000 uRamfs
bootz 0x41000000 0x41C00000 0x41800000
bootz 0x41000000 - 0x41800000

// expand ramdisk size in uboot !!!!!!!!!!!!!!!!!!!!
env set bootm_low 0x42000000
env set bootm_size 0x3e00000

gzip -k Image  //save original
setenv bootargs console=ttyS0,115200 rdinit=/sbin/init root=/dev/ram0 rw rootwait
setenv bootargs console=ttyS0,115200 rdinit=/bin/sh initrd=0x42381000 root=/dev/ram0 rw
setenv root /dev/ram0
setenv rootfstype ext2

increasing ramdisk-size fix it...
setenv initrd_low 0x0x41c00000
setenv initrd_high 0x42dff480

RAMDISK: Couldn't find valid RAM disk image starting at 0
